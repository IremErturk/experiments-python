
SOURCE_DIR=animal_factory

function help() {

  clear
  echo "================= Usage ================="
  echo "bandit                 : Install and run bandit security analysis."
  echo "clean                  : Remove autogenerated folders"
  echo "mypy                   : Install and run mypy type checking."
  echo "flake8                 : Install and run flake8 linting."
  echo "linter                 : Intall and run flake8, mypy and bandit"
  echo "install_requirements   : Install all the packages listed in *requirements*.txt files."
  echo "test                   : Run tests and generate coverage report."
  echo "release <patch/minor/major>" : Create a new release tag
  echo "publish_to_nexus       : Publish Python package to Nexus"
  echo "venv                   : Create Python venv, use it by running 'source ./venv/bin/activate'"
}

function init() {
  venv
}

function clean() {
  rm -rf .mypy_cache/
}

function venv() {
  python3 -m venv ./venv
}

# Install and run bandit security analysis
function run_bandit() {
  echo "bandit running"
  python -m pip install bandit
  bandit -r "$SOURCE_DIR"
}

# Install and run mypy type checking
function run_mypy() {
  echo "mypy Running"
  install_requirements
  python -m pip install mypy
  mypy --install-types --non-interactive $SOURCE_DIR
  mypy "$SOURCE_DIR"
}

# Install and run flake8 linting
function run_flake8() {
  echo "flake8 running"
  python -m pip install flake8
  flake8 "$SOURCE_DIR"
}

function run_linter() {
  run_flake8
  run_mypy
  run_bandit
}

# Install all the packages listed in *requirements*.txt files.
function install_requirements() {
  find . -name '*requirements*.txt' -exec python -m pip install -r {} \;
}

# Install requirements for testing and run tests
function test() {
  install_requirements
  pytest
}

function build_package() {
  python setup.py bdist_wheel
}

function publish_to_nexus() {
  pip install wheel twine
  echo "Uploading the package to nexus via twine..."
  if [ -z "${TWINE_USERNAME}" ]; then
    echo "\033[1mTWINE_USERNAME\033[0m is undefined."
    exit 1
  elif [ -z "${TWINE_PASSWORD}" ]; then
    echo "\033[1mTWINE_PASSWORD\033[0m is undefined."
    exit 1
  elif [ -z "${TWINE_REPOSITORY_URL}" ]; then
    echo "\033[1mTWINE_REPOSITORY_URL\033[0m is undefined."
    exit 1
  fi
  CURL_CA_BUNDLE="" twine upload --skip-existing dist/*.whl
}

function release(){
  pip install bumpversion
  bumpversion "$2"
  echo "Version increased, tag created. Don't forget to push the tag."
}

case $1 in
"help") help ;;
"bandit") run_bandit ;;
"clean") clean ;;
"mypy") run_mypy ;;
"flake8") run_flake8 ;;
"linter") run_linter ;;
"install_requirements") install_requirements ;;
"test") test ;;
"build_package") build_package ;;
"publish_to_nexus") publish_to_nexus ;;
"venv") venv ;;
"release") release $@;;
"init") init;;
*) help ;;
esac
